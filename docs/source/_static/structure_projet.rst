Structure Compl√®te du Projet
============================

Voici la structure compl√®te des fichiers et dossiers g√©n√©r√©s automatiquement par l'application :

.. code-block:: text

   SmartWebScraper-CV/
   ‚îú‚îÄ‚îÄ üìÅ LocalApp/
   ‚îÇ   ‚îî‚îÄ‚îÄ SMARTWEBSCRAPPER-CV/           # Application Flask principale
   ‚îÇ       ‚îú‚îÄ‚îÄ üìÅ app/                    # Code source principal
   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ routes/             # Routes Flask (logique m√©tier)
   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ utils/              # Utilitaires (OCR, NLP, etc.)
   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ models/             # Mod√®les entra√Æn√©s
   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ templates/          # Templates HTML
   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ static/             # CSS, JS, images
   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ data/               # üîÑ Donn√©es g√©n√©r√©es automatiquement
   ‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ üìÅ originals/            # Captures d'√©cran brutes
   ‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ üìÅ model/                # R√©f√©rentiel mod√®le + classes
   ‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ üìÅ annotated/            # Annotations automatiques
   ‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ üìÅ suppression/          # Images apr√®s suppression zones
   ‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ üìÅ predictions_scaled/   # JSON coordonn√©es mises √† l'√©chelle
   ‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ üìÅ human_data/           # üë§ Annotations utilisateur
   ‚îÇ       ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ manual/           # Annotations manuelles brutes
   ‚îÇ       ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ model/            # Annotations valid√©es
   ‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ üìÅ annotated_by_human/   # Visualisations annotations utilisateur
   ‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ üìÅ suppression_human/    # Suppressions par utilisateur
   ‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ üìÅ fine_tune_data/       # üéØ Donn√©es r√©-entra√Ænement
   ‚îÇ       ‚îÇ       ‚îî‚îÄ‚îÄ üìÅ fine_tune_backup/     # Archivage historique entra√Ænement
   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ run.py                  # Point d'entr√©e application
   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ requirements.txt        # D√©pendances Python
   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ .env                    # Variables d'environnement
   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ admin_config.json       # Configuration administrateur
   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ visited_link.json       # Journal URLs visit√©es
   ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ WORKFLOW.md             # Guide workflow d√©taill√©
   ‚îÇ
   ‚îú‚îÄ‚îÄ üìÅ docs/                           # üìñ Documentation ReadTheDocs
   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ source/                     # Sources documentation
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ introduction/           # Introduction & contexte
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ data/                   # Acquisition donn√©es
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ annotation/             # Strat√©gies annotation
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ modeling/               # Mod√©lisation CV
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ nlp/                    # Traitement NLP
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ architecture/           # Architecture app
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ results/                # R√©sultats & √©valuation
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ usage/                  # Guides utilisation
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ problems/               # R√©solution probl√®mes
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ api/                    # Documentation API
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ installation/           # Guides installation
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ deployment/             # Options d√©ploiement
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ _static/                # Ressources statiques
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ index.rst               # Page d'accueil
   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ conf.py                 # Configuration Sphinx
   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ build/                      # üîÑ Documentation g√©n√©r√©e
   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ requirements.txt            # D√©pendances documentation
   ‚îÇ
   ‚îú‚îÄ‚îÄ üìÑ .readthedocs.yaml               # Configuration ReadTheDocs
   ‚îú‚îÄ‚îÄ üìÑ README.md                       # Documentation principale
   ‚îú‚îÄ‚îÄ üìÑ setup.py                        # Script installation automatique
   ‚îú‚îÄ‚îÄ üìÑ Makefile                        # Automatisation t√¢ches
   ‚îú‚îÄ‚îÄ üìÑ environment.yml                 # Configuration Conda
   ‚îî‚îÄ‚îÄ üìÑ LICENSE                         # Licence MIT

D√©tail des Dossiers de Donn√©es
===============================

.. list-table:: Description des Dossiers de Donn√©es
   :header-rows: 1
   :widths: 25 75

   * - **Dossier**
     - **Contenu et Utilisation**
   * - ``originals/``
     - Images captur√©es directement depuis les sites web (format PNG haute r√©solution)
   * - ``model/``
     - Images de r√©f√©rence + fichiers JSON avec toutes les classes d√©tectables par le mod√®le
   * - ``annotated/``
     - Images avec annotations automatiques visualis√©es (bo√Ætes color√©es + labels)
   * - ``suppression/``
     - Images modifi√©es apr√®s suppression des zones s√©lectionn√©es par l'utilisateur
   * - ``predictions_scaled/``
     - Fichiers JSON contenant les coordonn√©es pr√©cises des bo√Ætes pr√©dites, mises √† l'√©chelle
   * - ``human_data/manual/``
     - Annotations manuelles brutes : 1 image + 2 JSON (brut & filtr√©) par annotation utilisateur
   * - ``human_data/model/``
     - Annotations valid√©es par l'utilisateur, pr√™tes pour la validation admin
   * - ``annotated_by_human/``
     - Visualisations finales des annotations cr√©√©es manuellement par l'utilisateur
   * - ``suppression_human/``
     - Images √©dit√©es selon les choix de zones de l'utilisateur (workflow manuel)
   * - ``fine_tune_data/``
     - Dataset constitu√© pour le r√©-entra√Ænement : images + annotations JSON valid√©es
   * - ``fine_tune_backup/``
     - Copie compl√®te de sauvegarde du dataset de fine-tuning (historique)

Flux de Donn√©es
================

.. mermaid::

   flowchart TD
       A[URL Soumise] --> B[originals/]
       B --> C[Mod√®le Detectron2]
       C --> D[annotated/]
       C --> E[predictions_scaled/]
       
       D --> F{Utilisateur Valide?}
       F -->|Oui| G[S√©lection Zones]
       F -->|Non| H[human_data/manual/]
       
       H --> I[Annotation Manuelle]
       I --> J[annotated_by_human/]
       J --> K[human_data/model/]
       
       G --> L[suppression/]
       K --> M{Admin Valide?}
       M -->|Oui| N[fine_tune_data/]
       M -->|Non| O[Correction Requise]
       
       N --> P[Fine-tuning Mod√®le]
       P --> Q[fine_tune_backup/]

Fichiers de Configuration
=========================

**.env (Variables d'Environnement)**

.. code-block:: bash

   # Configuration Flask
   FLASK_ENV=development
   FLASK_DEBUG=True
   SECRET_KEY=your-secret-key
   
   # APIs
   GEMINI_API_KEY=your-gemini-key
   SERPAPI_KEY=your-serpapi-key
   
   # GPU/CPU
   CUDA_VISIBLE_DEVICES=0
   FORCE_CPU_MODE=False
   
   # Mod√®les
   DETECTRON2_MODEL_PATH=app/models/detectron2/model_final.pth
   OLLAMA_BASE_URL=http://localhost:11434

**admin_config.json (Configuration Admin)**

.. code-block:: json

   {
     "admin_email": "admin@example.com",
     "admin_password": "secure_password",
     "validation_threshold": 0.8,
     "auto_backup": true,
     "fine_tune_min_samples": 50
   }

**visited_link.json (Journal des URLs)**

.. code-block:: json

   {
     "visited_urls": [
       {
         "url": "https://example.com",
         "timestamp": "2025-06-16T10:30:00Z",
         "status": "success",
         "capture_id": "capture_001"
       }
     ],
     "statistics": {
       "total_captures": 15,
       "success_rate": 0.93,
       "last_capture": "2025-06-16T15:45:00Z"
     }
   }

Gestion de l'Espace Disque
===========================

.. warning::
   **Surveillance de l'espace disque recommand√©e :**
   
   * Images haute r√©solution : 2-10 MB par capture
   * Annotations JSON : 10-50 KB par fichier
   * Croissance estim√©e : ~100 MB par 50 captures
   * Nettoyage p√©riodique des dossiers temporaires conseill√©

**Script de Nettoyage Automatique**

.. code-block:: python

   # Exemple de script maintenance
   import os
   from datetime import datetime, timedelta
   
   def cleanup_old_data(days=30):
       """Supprime les donn√©es de plus de X jours"""
       cutoff = datetime.now() - timedelta(days=days)
       
       cleanup_folders = [
           'data/originals/',
           'data/suppression/',
           'data/annotated/'
       ]
       
       for folder in cleanup_folders:
           for file in os.listdir(folder):
               file_path = os.path.join(folder, file)
               if os.path.getctime(file_path) < cutoff.timestamp():
                   os.remove(file_path)

Sauvegarde et Archivage
=======================

**Donn√©es Critiques √† Sauvegarder**

.. list-table:: Priorit√©s de Sauvegarde
   :header-rows: 1
   :widths: 30 20 50

   * - **Dossier**
     - **Priorit√©**
     - **Raison**
   * - ``fine_tune_data/``
     - **üî¥ Critique**
     - Dataset valid√© pour entra√Ænement
   * - ``human_data/model/``
     - **üî¥ Critique**
     - Annotations humaines valid√©es
   * - ``app/models/``
     - **üü° Important**
     - Mod√®les entra√Æn√©s personnalis√©s
   * - ``admin_config.json``
     - **üü° Important**
     - Configuration syst√®me
   * - ``visited_link.json``
     - **üü¢ Utile**
     - Historique et statistiques

**Commande de Sauvegarde Sugg√©r√©e**

.. code-block:: bash

   # Sauvegarde automatis√©e
   tar -czf backup_$(date +%Y%m%d).tar.gz \
       data/fine_tune_data/ \
       data/human_data/model/ \
       app/models/ \
       admin_config.json \
       visited_link.json

.. tip::
   **Bonnes pratiques de gestion :**
   
   * Sauvegarde hebdomadaire des donn√©es critiques
   * Rotation des backups (garder 4 semaines)
   * Surveillance espace disque avec alertes
   * Documentation des modifications importantes
   * Tests p√©riodiques de restauration
